<project xmlns:if="ant:if" xmlns:unless="ant:unless" name="jpa-entity-generator" basedir=".">

  <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <condition property="os" value="win" else="mac">
    <os family="windows" />
  </condition>

  <condition property="mvn.cmd" value="${basedir}\mvnw.cmd" else="${basedir}\mvnw">
    <os family="windows" />
  </condition>


  <target name="setup-db">
    <exec executable="${mvn.cmd}" failonerror="true">
      <arg line="-f jpa-entity-generator-db process-resources" />
    </exec>

    <exec executable="docker" failonerror="true" dir="jpa-entity-generator-db">
      <arg line="compose up -d dbms" />
    </exec>

    <exec executable="docker" failonerror="true" dir="jpa-entity-generator-db">
      <arg
        line="compose run --rm -T dockerize dockerize -wait tcp://host.docker.internal:${db.port} -timeout 300s" />
    </exec>

    <antcall target="migrate" />
  </target>


  <target name="down-db">
    <exec executable="docker" failonerror="true" dir="jpa-entity-generator-db">
      <arg line="compose down --rmi local -v" />
    </exec>
  </target>


  <target name="migrate">
    <exec executable="${mvn.cmd}" failonerror="true">
      <arg line="-f jpa-entity-generator-db flyway:clean flyway:migrate flyway:info" />
    </exec>
  </target>


  <target name="test">
    <exec executable="${mvn.cmd}" failonerror="true">
      <arg line="clean install -D maven.test.skip=true" />
    </exec>

    <antcall target="exec-jar" />
    <antcall target="exec-maven-plugin" />

    <exec executable="${mvn.cmd}" failonerror="true">
      <arg line="verify -P !release" />
    </exec>
  </target>


  <target name="exec-jar">
    <exec executable="${mvn.cmd}" failonerror="true">
      <arg line="-f jpa-entity-generator-core process-resources " />
    </exec>

    <java jar="jpa-entity-generator-core/target/jpa-entity-generator-core-${project.version}-all-deps.jar"
      fork="true" failonerror="true">
      <arg value="jpa-entity-generator-core/target/classes/jeg-config.json" />
      <jvmarg value="--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED" />
      <jvmarg value="--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED" />
      <jvmarg value="--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED" />
      <jvmarg value="--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED" />
      <jvmarg value="--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED" />
      <jvmarg value="--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED" />
    </java>
  </target>


  <target name="exec-maven-plugin">
    <exec executable="${mvn.cmd}" failonerror="true">
      <arg line="-f jpa-entity-generator-core process-resources " />
      <arg line="-Djeg.outputDir=jpa-entity-generator-maven-plugin/target/generated-test-resources/jeg" />
    </exec>

    <exec executable="${mvn.cmd}" failonerror="true">
      <env key="MAVEN_OPTS"
        value="--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED
      --add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED
      --add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED
      --add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED
      --add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED
      --add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED" />
      <arg line="-f jpa-entity-generator-maven-plugin/src/test/resources" />
      <arg line="jpa-entity-generator:reverse -D configFilePath=jpa-entity-generator-core/target/classes/jeg-config.json" />
    </exec>
  </target>


  <target name="reverse">
    <exec executable="${mvn.cmd}" failonerror="true">
      <env key="MAVEN_OPTS"
        value="--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED
      --add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED
      --add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED
      --add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED
      --add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED
      --add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED" />
      <arg line="-pl jpa-entity-generator-core process-resources exec:java" />
      <arg line="-Djeg.outputDir=jpa-entity-generator-core/src/gen/java" />
    </exec>
  </target>


  <target name="gen-docs">
    <delete dir="docs" />
    <mkdir dir="docs/schemaspy" />

    <parallel>
      <exec executable="${mvn.cmd}" failonerror="true">
        <arg line="-N -f jpa-entity-generator-docs" />
      </exec>

      <exec executable="docker" failonerror="true" dir="jpa-entity-generator-db">
        <arg line="compose run --rm schemaspy" />
      </exec>
    </parallel>

    <antcall target="trans-docs" />
  </target>


  <target name="trans-docs">
    <exec executable="${mvn.cmd}" failonerror="true">
      <arg line="-N batch-translator:translate
        -Dbt.source=jpa-entity-generator-docs/src/docs/markdown/README_ja.md
        -Dbt.target=README.md
        -Dbt.mode=ja2en
        -Dbt.engine=minhon" />
    </exec>

    <exec executable="${mvn.cmd}" failonerror="true">
      <arg line="-N batch-translator:translate
        -Dbt.source=docs/ja/
        -Dbt.target=docs/en/
        -Dbt.filePattern=*.html
        -Dbt.mode=ja2en
        -Dbt.engine=aws" />
    </exec>
  </target>


  <target name="sonar">
      <exec executable="${mvn.cmd}" failonerror="true">
        <arg line="clean jacoco:prepare-agent test jacoco:report sonar:sonar" />
      </exec>
  </target>


  <target name="set-version">
    <property name="version" value="" />
    <fail
      if:blank="${version}" 
      message="Please specify version in the system properties. (e.g. mvnw -Dant.target=set-version -Dversion=1.x.x"
    />

    <exec executable="${mvn.cmd}" dir="${basedir}">
      <arg line="versions:set -DnewVersion=${version} -DgenerateBackupPoms=false" />
    </exec>

    <if>
      <not>
        <matches string="${version}" pattern="^.*-SNAPSHOT$" />
      </not>
      <then>
        <replaceregexp flags="g">
          <regexp pattern="((?&lt;=jpa-entity-generator-core.*)|(?&lt;=version&gt;.*))(\d+[\.\d]+\d+)" />
          <substitution expression="${version}" />
          <fileset dir="${basedir}">
            <include name="README.md" />
            <include name="**/README_ja.md" />
          </fileset>
        </replaceregexp>
      </then>
    </if>
  </target>

</project>